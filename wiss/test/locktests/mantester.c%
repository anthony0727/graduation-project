
/********************************************************/
/*                                                      */
/*               WiSS Storage System                    */
/*          Version SystemV-4.0, September 1990	        */
/*                                                      */
/*              COPYRIGHT (C) 1990                      */
/*                David J. DeWitt 		        */
/*               Madison, WI U.S.A.                     */
/*                                                      */
/*	         ALL RIGHTS RESERVED                    */
/*                                                      */
/********************************************************/


#include <wiss.h>
#include <lockquiz.h>		
#include <locktype.h>

#define	 ctoi(c)	(c - '0')

int transId = -1 ;

/*** file id ***/
FID which_file()
{
  char	file;
  FID	fid;
  
  fid.Fvolid = 1989;
  
  printf("\n Which file (1/2/3) ? ");
  new_sgtty();
  while (!strchr("123", (file = getchar())));
  old_sgtty();
  putchar(file);
  putchar('\n');
  
  fid.Ffilenum = ctoi(file);
  fid.Fvolid = 1983;
  return(fid);
} /* end which_file() */

/*** page id ***/
PID which_page()
{
  char	page;
  PID	pid;
  
  pid.Pvolid = 1989;
  
  printf("\n Which page (1/2/3) ? ");
  new_sgtty();
  while (!strchr("123", (page = getchar())));
  old_sgtty();
  putchar(page);
  putchar('\n');
  
  pid.Ppage = ctoi(page);
  return(pid);
} /* end which_page() */

/* mode */
int which_mode()
{
  char	mode;

  printf("\n Which mode (IS->%d, IX->%d, S->%d, X->%d) ? ", 
     l_IS, l_IX, l_S, l_X);
  new_sgtty();
  while (!strchr("1235", (mode = getchar())));
  old_sgtty();
  putchar(mode);
  putchar('\n');
  return((int) ctoi(mode));
} /* end which_mode() */

/* lock duration */
DURATION which_dur()
{
  char  	dur;
  
  printf("\n Which duration (INSTANT->i, MANUAL->m, COMMIT->c) ? ");
  new_sgtty();
  while (!strchr("imc", (dur = getchar())));
  old_sgtty();
  putchar(dur);
  putchar('\n');
  if (dur == 'i')
    return(DURATION)INSTANT;
  else if (dur == 'm')
    return(DURATION)MANUAL;
  else return(DURATION)COMMIT;
} /* end which_dur() */

/* conditionnal lock */
short which_cond()
{
  char	cond;
  
  printf("\n Conditionnal lock (TRUE->t, FALSE->f) ? ");
  new_sgtty();
  while (!strchr("tf", (cond = getchar())));
  old_sgtty();
  putchar(cond);
  putchar('\n');
  if (cond == 't')
    return(short)TRUE;
  else
    return(short)FALSE;
} /* end which_cond() */


/*** routine calling lock_file() ***/
r_lock_file()
{
  struct graph_bucket *trans_cell;
  FID	 file;
  int mode;
  DURATION dur;
  short  cond;
  int	 status;
  
  file = which_file();
  mode = which_mode();
  dur = which_dur();
  cond = which_cond();
  
  status = lock_file(transId, file, mode, dur, cond);
  printf("--> %d\n", status);
  if (status == ABORTED) printf("transaction aborted!!\n");
}

/*** routine calling m_release_file() ***/
r_release_file()
{
  struct graph_bucket *trans_cell;
  FID	 file;
  int	 status;

  file = which_file();
  
  status = m_release_file(transId, file);
  printf("--> %d\n", status);
}

/*** routine calling lock_page() ***/
r_lock_page()
{
  PID	 page;
  FID	 file;
  int mode;
  DURATION dur;
  short  cond;
  int	 status;

  page = which_page();
  mode  = which_mode();
  file  = which_file();
  dur = which_dur();
  cond = which_cond();

  status = lock_page(transId, file, page, mode, dur, cond);
  printf("--> %d\n", status);
  if (status == ABORTED) printf("transaction aborted!!\n");
}

/*** routine calling m_release_page() ***/
r_release_page()
{
  struct graph_bucket *trans_cell;
  PID	 page;
  int	 status;

  page = which_page();
  
  status = m_release_page(transId, page);
  printf("--> %d\n", status);
}


main(argc, argv)
int argc;
char **argv;
{
  
  int i;
  int	status;			/* for returned flags */
  char	run_option;		/* the number of the primitive to run */
  
  printf(" START: Driver for lock manager ...\n");

  wiss_init();

  init_sgttyb();
  
  printf("Manual lock tester. NOTE!!! page #s are global\n");
  printf("That is, no matter what file number is specified \n");
  printf("page 1 is page 1, and page 2 is page 2, ... \n");
  for(; ;){
    /* make the user choose the lockmanager primitive to run */
    printf("\n Choose an operation :\n");
    printf("\t [q] quit\n");
    printf("\t [o] open transaction\n");
    printf("\t [a] abort transaction\n");
    printf("\t [c] commit transaction\n");
    printf("\t   [L] lock a file\n");
    printf("\t   [R] release a file lock\n");
    printf("\t   [l] lock a page\n");
    printf("\t   [r] release a page lock\n");
    printf("\n Please, your choice ?  ");
    
    new_sgtty();
    while (!strchr("qQoOaAcClLrR", (run_option = getchar())));
    old_sgtty();
    putchar(run_option);
    if (run_option == 'q' || run_option == 'Q')
      break;
    
    putchar('\n');
    
    switch(run_option){
    case 'o':
    case 'O':
      if (transId != -1) commit_trans(transId);
      transId = begin_trans();
      printf("new transaction id = %d\n",transId);
      break;
    case 'a':
    case 'A':
      abort_trans(transId);
      break;
    case 'c':
    case 'C':
      commit_trans(transId);
      transId = -1;
      break;
    case 'L':
      r_lock_file();
      break;
    case 'R':
      r_release_file();
      break;
    case 'l':
      r_lock_page();
      break;
    case 'r':
      r_release_page();
      break;
    } /* end switch */
  } /* end for */

  printf("\n\n ...TERMINATED run\n");
  wiss_final();
}
