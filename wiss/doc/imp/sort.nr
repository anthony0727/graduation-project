.sh 2 "The Sort Routine"
.(x
.sh 2 "The Sort Routine"
.)x
.pp
The sort routine in WiSS implements a disk-based external merge-sort.
Given a data file, it re-arranges the order of records in that file according
to some attribute.
It is used by the routine which creates B-tree indices as we mentioned
in a previous section.
This sort routine is also accessible to users of WiSS 
in cases where strictly ordered files are required (as
in the sort-merge method for implementing a join).
.pp
The sort routine is implemented to utilize as much primary
memory as possible in order to save disk io's.
Unlike other operations in a storage system, the expected disk io activities
and the time to do them in an external sort routine is known in advance.
In other words, we know exactly when to read in a page, and when to write
out a page.
Under this circumstance, there is no need to use a generalized buffer manager.
Consequently, our sort routine (almost) completely bypasses the level 1
buffer manager of WiSS, and do the necessary page buffering by itself.
.pp
The sort routine can be divided into two distinct phases :
the sorting phase and the merging phase.
For the purpose of discussion, we define
.ul
a partition
to be a collection of sorted records.
The sorting phase go through a loop in which pages are read in as much 
as possible at a time to produce a sorted partition.
A combined method of quick sort and straight insertion sort
is used to sort the records in the page buffers.
After each sorted partition is produced, records are gathered
into a output page buffer, which are written out to disk as soon as
it is full.
.pp
After the sorting phase, partitions are merged to
produce larger and larger partitions 
in successive passes until there is only one partition left.
Two files are used alternately as the input and output files.
In each pass, the input file holds all the sorted partitions
produced by the previous pass.
When an output partition is generated by merging partitions 
from the input file, it is appended to the output file.
Each partition in a file is described by an auxiliary structure
that tells where (inside the file) the partition begins and ends.
The roles of the files are switched between passes.
Using this technique, the overhead of creating (and removing)
temporary files to hold intermediate partitions is reduced.

