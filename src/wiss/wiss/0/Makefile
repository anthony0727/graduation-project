# Makefile for level 0 of WiSS

# directory of includeable files
INCLUDE = ..

CFLAGS = -I$(INCLUDE) $(DEBUGFLAG) $(TRACEFLAG) $(PROF) -D_SYNCHDISK
#CFLAGS = -I$(INCLUDE) $(DEBUGFLAG) $(TRACEFLAG) $(PROF)

# the INNER files are internal level 0 routines
INNER = IOreadwrite.o IOmount.o IOcheck.o IOfiman.o IOextent.o 

INNERC = IOreadwrite.c IOmount.c IOcheck.c IOfiman.c IOextent.c 

# the OUTER files are seen by the outside world
OUTER = io_createf.o io_destroyf.o io_allocp.o io_freepage.o\
	io_readpage.o io_writepage.o io_filedir.o io_check.o\
	io_mount.o io_volid.o io_dismount.o io_error.o io_init.o io_final.o

OUTERC = io_createf.c io_destroyf.c io_allocp.c io_freepage.c\
	io_readpage.c io_writepage.c io_filedir.c io_check.c\
	io_mount.c io_volid.c io_dismount.c io_error.c io_init.c io_final.c

# Here come the dependencies
# first, the thing which depends on everything else
wiss0.o : $(INNER) $(OUTER) 	# call our module wiss0.o
	@echo ld -r ~~~ -o wiss0.o
	@ld -r $(INNER) $(OUTER) -o wiss0.o
	chmod -x wiss0.o
# load it all into a big .o module, make it non-executable (it's incomplete!)

# all the object files depend on some header files
$(INNER) $(OUTER) : $(INCLUDE)/wiss.h $(INCLUDE)/page.h $(INCLUDE)/sm.h \
		    $(INCLUDE)/io_error.h $(INCLUDE)/io.h $(INCLUDE)/latch.h

io_error.o : IOerror.i	# io_error depends on the .i file generated by m4

IOerror.i : IOerror.m4
	m4 $(INCLUDE)/handler.m4 IOerror.m4 >IOerror.i

$(INCLUDE)/io_error.h : IOerror.m4
	m4 $(INCLUDE)/defs.m4 IOerror.m4 >$(INCLUDE)/io_error.h

tags : $(INNERC) $(OUTERC)
	@ctags $(INNERC) $(OUTERC)

lint : $(INNERC) $(OUTERC) 
	@echo lint ~~~ '>lint.out'
	@lint -I$(INCLUDE) $(INNERC) $(OUTERC) > lint.out

clean : 
	/bin/rm -f *.o
