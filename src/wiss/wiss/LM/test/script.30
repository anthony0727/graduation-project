O 0
O 1
O 2

L 0 0 5 c f
L 1 1 3 c f
L 1 0 3 c f
L 2 2 5 c f
L 2 0 3 c f

L 0 2 3 c f

T 0
T 1
T 2

C 1
C 2
Q



--------------------------- script.30 ---------------------------

The main actions here are:
  a) transaction 0 locks file 0 in X mode.
  b) transaction 1 locks file 1 in S mode, and waits for transaction 0
     to have a lock on file 0.
  c) transaction 2 locks file 2 in X mode, and waits for transaction 0
     to have a lock on file 0..
  d) transaction 0 asks for a lock on file 2, and raises a deadlock.
     transactions 1 and 2 can restart.



The detailed description of each command line is:

 open_trans(trans 0)
 open_trans(trans 1)
 open_trans(trans 2)

 lock_file(trans 0, file 0, mode X, duration COMMIT, cond False)
 lock_file(trans 1, file 1, mode S, duration COMMIT, cond False)
 lock_file(trans 1, file 0, mode S, duration COMMIT, cond False)

 lock_file(trans 2, file 2, mode X, duration COMMIT, cond False)
 lock_file(trans 2, file 0, mode S, duration COMMIT, cond False)

 lock_file(trans 0, file 2, mode S, duration COMMIT, cond False)

 commit(trans 1)
 commit(trans 2)
 quit



The expected output (so as to perform a "diff" with the next 
execution output) is:
-------------------------------------------------
O 0
--> 1

O 1
--> 1

O 2
--> 1

L 0 0 5 c f
--> 0

L 1 1 3 c f
--> 0

L 1 0 3 c f
--> -1550

L 2 2 5 c f
--> 0

L 2 0 3 c f
--> -1550

L 0 2 3 c f
-->(walkfile) transaction 1 can restart!

-->(walkfile) transaction 2 can restart!

--> -1250

T 0
--> No transaction 0

T 1
--> Trans 1 is owning:
   . File 0 (lock S)
           . lock S granted to trans 1
           . lock S granted to trans 2
   . File 1 (lock S)
           . lock S granted to trans 1
 No lock waited by trans. 1

T 2
--> Trans 2 is owning:
   . File 0 (lock S)
           . lock S granted to trans 1
           . lock S granted to trans 2
   . File 2 (lock X)
           . lock X granted to trans 2
 No lock waited by trans. 2

C 1
C 2
Q
-------------------------------------------------
