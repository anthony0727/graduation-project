O 0
O 1
O 2

L 0 0 1 c f
l 0 0 0 3 c f
l 0 0 1 3 c f

L 1 1 1 c f
l 1 1 3 3 c f
l 1 1 4 3 c f

L 2 2 1 c f
l 2 2 6 3 c f
l 2 2 7 3 c f
L 2 0 1 c f
l 2 0 0 3 c f

L 0 1 5 c f
L 1 2 2 c f
l 1 2 6 5 c f

F 0
F 1
F 2

l 2 0 1 5 c f
T 0
T 1

C 1
C 0
Q



--------------------------- script.31 ---------------------------

The main actions here are:
  a) transaction 0 locks file 0, pages 0,1 in shared mode, and
     waits for transaction 1 to have a lock on file 1.
  b) transaction 1 locks file 1, page 3,4 in shared mode, and
     waits for transaction 2 to have a lock on page 6.
  c) transaction 2 locks file 2, page 6,7, file 0, page 0 in shared 
     mode, and asks for a lock on page 1 in exclusive mode. But page 1 
     is owned by transaction 0, so a deadlock is detected.



The detailed description of each command line is:

 open_trans(trans 0)
 open_trans(trans 1)
 open_trans(trans 2)

 lock_file(trans 0, file 0, mode IS, duration COMMIT, cond False)
 lock_page(trans 0, file 0, page 0, mode S, duration COMMIT, cond False)
 lock_page(trans 0, file 0, page 1, mode S, duration COMMIT, cond False)

 lock_file(trans 1, file 1, mode IS, duration COMMIT, cond False)
 lock_page(trans 1, file 1, page 3, mode S, duration COMMIT, cond False)
 lock_page(trans 1, file 1, page 4, mode S, duration COMMIT, cond False)

 lock_file(trans 2, file 2, mode IS, duration COMMIT, cond False)
 lock_page(trans 2, file 2, page 6, mode S, duration COMMIT, cond False)
 lock_page(trans 2, file 2, page 7, mode S, duration COMMIT, cond False)
 lock_file(trans 2, file 0, mode IX, duration COMMIT, cond False)
 lock_page(trans 2, file 0, page 0, mode S, duration COMMIT, cond False)

 lock_file(trans 0, file 1, mode X, duration COMMIT, cond False)
 lock_file(trans 1, file 2, mode IX, duration COMMIT, cond False)
 lock_page(trans 1, file 2, page 6, mode X, duration COMMIT, cond False)

 lock_page(trans 2, file 0, page 1, mode X, duration COMMIT, cond False)
 look at state of transaction 0
 look at state of transaction 1

 commit(trans 1)
 commit(trans 0)
 quit



The expected output (so as to perform a "diff" with the next 
execution output) is:
-------------------------------------------------
O 0
--> 1

O 1
--> 1

O 2
--> 1

L 0 0 1 c f
--> 0

l 0 0 0 3 c f
--> 0

l 0 0 1 3 c f
--> 0

L 1 1 1 c f
--> 0

l 1 1 3 3 c f
--> 0

l 1 1 4 3 c f
--> 0

L 2 2 1 c f
--> 0

l 2 2 6 3 c f
--> 0

l 2 2 7 3 c f
--> 0

L 2 0 1 c f
--> 0

l 2 0 0 3 c f
--> 0

L 0 1 5 c f
--> -1550

L 1 2 2 c f
--> 0

l 1 2 6 5 c f
--> -1550

F 0
--> File 0 is owned by:
   . transaction 0 (lock IS)
   . transaction 2 (lock IS)
 And has the page(s):
   . page 1 (lock S)
   . page 0 (lock S)

F 1
--> File 1 is owned by:
   . transaction 1 (lock IS)
 And is waited by:
   . transaction 0 (lock X - duration 2)
 And has the page(s):
   . page 4 (lock S)
   . page 3 (lock S)

F 2
--> File 2 is owned by:
   . transaction 1 (lock IX)
   . transaction 2 (lock IS)
 And has the page(s):
   . page 7 (lock S)
   . page 6 (lock S)

l 2 0 1 5 c f
-->(walkfile) transaction 1 can restart!

--> -1250

T 0
--> Trans 0 is owning:

   . Page 1 (lock S)
           . lock S granted to trans 0

   . Page 0 (lock S)
           . lock S granted to trans 0
   . File 0 (lock IS)
           . lock IS granted to trans 0
 And is waiting for:
   . File 1 (lock IS)
           . lock IS granted to trans 1
           . lock X waited by trans 0 - duration 2

T 1
--> Trans 1 is owning:

   . Page 6 (lock X)
           . lock X granted to trans 1
   . File 2 (lock IX)
           . lock IX granted to trans 1

   . Page 4 (lock S)
           . lock S granted to trans 1

   . Page 3 (lock S)
           . lock S granted to trans 1
   . File 1 (lock IS)
           . lock IS granted to trans 1
           . lock X waited by trans 0 - duration 2
 No lock waited by trans. 1

C 1
-->(walkfile) transaction 0 can restart!

C 0
Q
-------------------------------------------------
